// <auto-generated />
using System;
using EmployeeManagementSystem.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(EmployeeManagementSystemDbContext))]
    [Migration("20250915191714_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LatestDateUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("LogoName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectPage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RefCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LatestUpdatedBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("RefCode")
                        .IsUnique();

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.ModuleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LatestDateUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ModuleAccessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RefCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LatestUpdatedBy");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RefCode")
                        .IsUnique();

                    b.ToTable("ModuleAccesses");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsFrozen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LatestDateUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordChangedUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LatestUpdatedBy");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LatestDateUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("RefCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LatestUpdatedBy");

                    b.HasIndex("RefCode")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.UserRoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LatestDateUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ModuleAccessId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LatestUpdatedBy");

                    b.HasIndex("ModuleAccessId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleAccesses");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.Module", b =>
                {
                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedModules")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedModules")
                        .HasForeignKey("LatestUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.Module", "ParentModule")
                        .WithMany("SubModules")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ParentModule");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.ModuleAccess", b =>
                {
                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedModuleAccesses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedModuleAccesses")
                        .HasForeignKey("LatestUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.Module", "Module")
                        .WithMany("ModuleAccesses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.ModuleAccess", "ParentAccess")
                        .WithMany("SubAccesses")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Module");

                    b.Navigation("ParentAccess");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("LatestUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedUserRoles")
                        .HasForeignKey("LatestUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.UserRoleAccess", b =>
                {
                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedUserRoleAccesses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedUserRoleAccesses")
                        .HasForeignKey("LatestUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.ModuleAccess", "ModuleAccess")
                        .WithMany("UserRoleAccesses")
                        .HasForeignKey("ModuleAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementSystem.Domain.Entities.UserRole", "UserRole")
                        .WithMany("UserRoleAccesses")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModuleAccess");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.Module", b =>
                {
                    b.Navigation("ModuleAccesses");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.ModuleAccess", b =>
                {
                    b.Navigation("SubAccesses");

                    b.Navigation("UserRoleAccesses");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedModuleAccesses");

                    b.Navigation("CreatedModules");

                    b.Navigation("CreatedUserRoleAccesses");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("CreatedUsers");

                    b.Navigation("UpdatedModuleAccesses");

                    b.Navigation("UpdatedModules");

                    b.Navigation("UpdatedUserRoleAccesses");

                    b.Navigation("UpdatedUserRoles");

                    b.Navigation("UpdatedUsers");
                });

            modelBuilder.Entity("EmployeeManagementSystem.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("UserRoleAccesses");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
